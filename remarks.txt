2. В тестах используется тот же класс (ICCProfileParser), который лежит в основе сервиса.
 Таким образом, по сути тестируется конфигурация сервиса, а не ключевая логика.
Все expected value следовало бы не высчитывать, а, к примеру, передать как параметр теста,
 либо просто сделать hardcoded.

Из более мелких замечаний, нарушение Best Practices по большей части:

- совмещать объект, сохраняемый в базу данных, и объект, используемый для представления в виде XML, JSON etc., плохая практика. 
Во-первых, эти объекты чаще всего отличаются по структуре. В частности, нет смысла хранить URL, он должен динамически
генерироваться на основании запроса и ID запрашиваемого ресурса (на случай, если что-то изменится в инфраструктуре сервера:
изменится IP, будет использоваться как Proxy, так и внутренний доступ и т.д.).
Во-вторых, на более сложных объектах могут возникнуть проблемы с hibernate и конфликты с JAXB.
В целом, рекомендую поискать какие нибудь статьи на тему использования DTO, их преимуществ, недостатков и т.д.

// DONE

- слишком много логики на уровне контроллера, в результате сервисный класс получился как пустой посредник между
 контроллером и DAO.
Контроллер должен отвечать только за представление информации и перенаправление в соответствующий сервис:

    // Controller
    @ResponseStatus(value = HttpStatus.CREATED)
    @RequestMapping(value = "/iccprofiles", method = RequestMethod.POST)
    public @ResponseBody ICCProfile
    uploadProfile(@RequestParam("profile") MultipartFile profile, HttpServletRequest request) throws IOException {
        ICCProfile iccProfile = iccProfileService.addICCProfile(profile.getOriginalFilename(), profile.getInputStream());        
        // convert model object to DTO object or other presentation and return
    }

    // Service
    ICCProfile addICCProfile(String name, InputStream content) {
        // here we store content into FS, parse it, save parsed object into DB and return it
    }

- в pom.xml не хватало зависимости на slf4j, в результате не могла проинициализироваться SessionFactory при запуске
 на стороннем Tomcat

- для передачи информации о базе данных лучше использовать:
1) SQL файл с описанием схемы базы данных (если она не генерируется автоматически),
его зачастую включают в исходный код проекта.
2) если необходимо передать содержимое, используют dump:
http://www.thegeekstuff.com/2008/09/backup-and-restore-mysql-database-using-mysqldump/
